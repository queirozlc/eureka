name: Elixir CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
env:
  MIX_ENV: test

permissions:
  contents: read

jobs:
  tests:
    # Set up a Postgres DB service. By default, Phoenix applications
    # use Postgres. This creates a database for running tests.
    # Additional services can be defined here if required.
    services:
      db:
        image: postgres:16
        ports: ['5432:5432']
        env:
          POSTGRES_PASSWORD: postgres
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    runs-on: ubuntu-latest
    name: Test on OTP ${{matrix.otp}} / Elixir ${{matrix.elixir}}
    strategy:
      # Specify the OTP and Elixir versions to use when building
      # and running the workflow steps.
      matrix:
        otp: ['26.0', '27.0']
        elixir: ['1.15', '1.17']
        exclude:
          - otp: '27.0'
            elixir: '1.15'
    steps:
      # Step: Setup Elixir + Erlang image as the base.
      - name: Checkout Code
        uses: actions/checkout@v4
      - name: Setup Elixir + Erlang OTP
        uses: erlef/setup-beam@v1
        with:
          otp-version: ${{matrix.otp}}
          elixir-version: ${{matrix.elixir}}
      # Step: Define how to cache deps. Restores existing cache if present.
      - name: Cache Elixir Deps
        id: cache-deps
        uses: actions/cache@v4
        env:
          cache-name: cache-elixir-deps
        with:
          path: deps
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
      # Step: Define how to cache the `_build` directory. After the first run,
      # this speeds up tests runs a lot. This includes not re-compiling our
      # project's downloaded deps every run.
      - name: Cache Elixir Build
        id: cache-build
        uses: actions/cache@v4
        env:
          cache-name: cache-compiled-build
        with:
          path: _build
          key: ${{ runner.os }}-mix-${{ env.cache-name }}-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-${{ env.cache-name }}-
            ${{ runner.os }}-mix-
      # Step: Download project dependencies. If unchanged, uses
      # the cached version.
      - name: Get Dependencies
        run: mix deps.get

      # Step: Compile the project treating any warnings as errors.
      - name: Compile with Warnings as Errors
        run: mix compile --warnings-as-errors

      # Step: Check that the checked in code has already been formatted.
      # This step fails if something was found unformatted.
      - name: Check Code Formatting
        run: mix format --check-formatted

      # Step: Performs static code analysis on the project.
      - name: Run Credo
        run: mix credo

      # Step: Execute the tests.
      - name: Run Tests
        run: mix test

      # Step: Check unused deps.
      - name: Check Unused Deps
        run: mix deps.unlock --check-unused
